code immediate function () {	// 定義 指令 immediate
  lstWrd.immediate=1		// 使 最後定義的指令 在高階編譯狀態 能執行
} end-code
code // function () { var n,t	// 定義 指令 // (雙斜線) 忽略源碼字串到 列尾
  iTib += (n= (t=tib.substr(iTib)).indexOf('\n') )>=0 ? n : t.length
} end-code immediate		// 使 雙斜線 指令 在高階編譯狀態 能執行
// /////////// wrds preload ( include previous 2 wrds /////////////// //
code debug function() {	// 定義 指令 debug ( <指令名稱> -- )
  var tkn=nxtTkn()	// 從 隨後源碼 取 tkn (以空格區隔的下一個字串)
  var z=fndWrd(tkn)	// 取 所對應 指令位址 [vid,wid]
  if (z) {
    if (0>debugged.indexOf(z=z.join())) // 如果 不在 待追蹤指令陣列
      debugged.push(z)			// 將 指令位址 加入 待追蹤指令陣列
    else
      print(z+' already in debugged')	// 已在 待追蹤指令陣列
  } else
      abort('debug '+tkn+' undefined')// 沒有 所對應 符式指令 資訊
} end-code
code ' function () { // 定義 指令 ' ( <指令名稱> -- 指令位址 )
  var z, t
  var z=fndWrd(t=nxtTkn())	// 取 隨後源碼 指令名稱 的 指令位址 z
  if (z) dStk.push(z)		// 若找到 z 就放上堆疊
  else abort(t+' not found')	// 否則 就 abort
} end-code
code alias function () { // 定義 指令 alias ( 指令位址 <指令別名> -- )
  var w=zWrd(dStk.pop())	// 取 已定義指令 w
  newWrd(nxtTkn(),w.xt)	// 定義 隨後源碼 指令別名
  if (w.src)         lstWrd.src	 	=w.src		// 高階源碼
  if (w.compileOnly) lstWrd.compileOnly	=w.compileOnly	// 在高階編譯狀態 才執行
  if (w.immediate)   lstWrd.immediate	=w.immediate	// 在高階編譯狀態 能執行
  if (w.wrds)       lstWrd.wrds	=w.wrds	// 詞彙指令陣列
  if (w.index)  lstWrd.index	=w.index	// 詞彙指令索引
} end-code
' // alias \
code words function(){ // 定義 指令 wrds ( -- ) 列印 當前詞彙 所有 指令名稱
  var v=vocs[context[0]]
  print('\nin '+v.name+' have wrds:\n '+v.wrds.map(	// 列印 每個指令
    function(w){return w?w.name:''}			// 其 名稱
  ).join(' '))						// 以 空格 區隔
} end-code
code : function () { // 定義 指令 : ( <指令名稱> -- ) 開始 高階指令的定義
  src		= ''			// 高階指令 源碼
  hSrc		= iTib-2		// 高階指令 源碼字串起點
  hName		= nxtTkn()		// 高階指令 名稱
  hXt		= compiledCode.length 	// 高階指令 編碼起點
  compiling	= 1			// 高階指令 編譯狀態 進入
} end-code
code compileOnly function () { // 定義 指令 compileOnly ( -- )
  lstWrd.compileOnly=1		// 使 最後定義指令 高階編譯狀態 才編碼
} end-code
code ret function () { // 定義 指令 ret ( -- ) 結束被呼叫的 高階指令
  ip=rStk.pop()		// 從 return stack 取出 ip
} end-code compileOnly	// 使 ret 在高階編譯狀態 才編碼
code doLit function () { // 定義 指令 doLit ( -- n ) 將 隨後編碼 n 放上堆疊
  var n=compiledCode[ip++]	// 取 ip 所指 編碼 n
  dStk.push(n)			// 將 n 放上堆疊
} end-code compileOnly		// 使 doLit 在高階編譯狀態 才編碼
code ; function () { // 定義 指令 ; ( -- ) 結束 高階指令的定義
  compileCode("ret")			// 編譯 ret 為 高階指令 內碼
  compiling=0				// 高階指令 編譯狀態 結束
  var src=tib.substring(hSrc,iTib)	// 源碼字串
  newWrd(hName,hXt,src)		// 以 名稱 內碼起點 原碼字串 定義 高階指令
} end-code compileOnly immediate	// 使 ; 在高階編譯狀態 才編碼 能執行
// //////////////////////// vocabulary test ////////////////////////// //
code vocabulary function(){ var v, i, vid, w
  v=vocs[current], i=v.wrds.length, vid=vocs.length
  newWrd(nxtTkn(),eval('(function(){context[0]='+vid+'})')) // add new word
  w=v.wrds[i], w.vid=vid, w.wrds=[0], w.index={}
  vocs.push(w) // add new vocabulary
} end-code immediate
code definitions function(){
  current=context[0]
} end-code
code also function () {
  context.unshift(context[0])
} end-code
code previous function () {
  context.shift()
} end-code
vocabulary voc1 // 定義 詞彙 voc1
vocabulary voc2 // 定義 詞彙 voc2
vocabulary voc3 // 定義 詞彙 voc3
dbg voc1 definitions
code a1 function () {
  print(' a1 in voc1')
} end-code
code b1 function () {
  print(' b1 in voc1')
} end-code
code c1 function () {
  print(' c1 in voc1')
} end-code
voc2 definitions
code a22 function () {
  shwWrn(' a22 in voc2')
} end-code
code b22 function () {
  shwWrn(' b22 in voc2')
} end-code
code c22 function () {
  shwWrn(' c22 in voc2')
} end-code
voc3 definitions
code a333 function () {
  shwErr(' a333 in voc3')
} end-code
code b333 function () {
  shwErr(' b333 in voc3')
} end-code
code c333 function () {
  shwErr(' c333 in voc3')
} end-code
voc1 words
voc2 words
voc3 words
voc2 definitions
code a1 function () {
  shwWrn(' a1 in voc2')
} end-code
voc1 a1 also
voc2 b22 a1
voc3 c333 a1
previous voc3 a1