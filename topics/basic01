code . function(){ // [0,4] . ( n -- ) 從堆疊 印出 n
///////////////////////////////////////////////////////////////////////////
// 注意 系統啟動時 只認得指令 code, 這 code 可定義隨後 任意字串 為新指令
// 隨後直到 end-code 前的字串 為 這新指令 所要執行的 匿名 js function 
// 雙斜線後 直到列尾的文字 是 js function 的 內部註解語法, 不能在外部使用
// 首列 [0,4] 表示 所定義的 指令位址 為 vocs[0].wrds[4] 可簡寫為 0,4
// 首列 圓括號內 雙減號 前後 表示 執行 這指令 前後的 堆疊狀況
// 這裡 從堆疊取的 n 可為 字串、浮點數、整數, 而 整數 還可用 不同進制 印出
// end-code 之後 1 2 3 . . . 表示 依序 輸入 3 個整數 後 連續執行 3 次 印出
// 注意 先印出的 應該是 3, 然後 印出 2, 最後印出的 是 1	
///////////////////////////////////////////////////////////////////////////
  var n=dStk.pop(); print(' '+(n%1===0 && base!==10 ? n.toString(base) :n))
  /////////////////////////////////////////////////////////////////////////
  // dStk 為 資料堆疊, n%1===0 檢視 n 是否整數, base 為 整數 解讀/列印 基數
  // print(' '+n) 印出
  /////////////////////////////////////////////////////////////////////////
} end-code
1 2 3 . . .
code + function(){ // [0,5] + ( a b -- c ) 堆疊 取出 a b 相加 將結果 c 放回
///////////////////////////////////////////////////////////////////////////
// end-code 之後 1 2 3 + + . 會將 2 3 相加 然後將 1 5 相加 最後印出 6
///////////////////////////////////////////////////////////////////////////
  var b=dStk.pop(); dStk[dStk.length-1]+=b
} end-code
1 2 3 + + .
code $" function(){ // [0,6] $" ( <str>" -- s ) 空格後到 " 前字串 s 放堆疊
///////////////////////////////////////////////////////////////////////////
// end-code 之後 $" abc" $" def" + . 會將 字串 abc 與 def 相加 印出 abcedf
///////////////////////////////////////////////////////////////////////////
  dStk.push(nxtTkn('"'))
} end-code
$" abc" $" def" + .
code - function(){ // [0,7] - ( a b -- c ) 堆疊 取出 a b 相減 將結果 c 放回
///////////////////////////////////////////////////////////////////////////
// end-code 之後 15.5 2.5 - . 會 印出 13
///////////////////////////////////////////////////////////////////////////
  var n=dStk.pop(); dStk[dStk.length-1]-=n
} end-code
15.5 2.5 - .
code * function(){ // [0,8] * ( a b -- c ) 堆疊 取 a b 相乘 將結果 c 放回
///////////////////////////////////////////////////////////////////////////
// end-code 之後 10 3 * . 會 印出 30
///////////////////////////////////////////////////////////////////////////
  var n=dStk.pop(); dStk[dStk.length-1]*=n
} end-code
10 3 * .
code / function(){ // [0,9] / ( a b -- c ) 堆疊 取 a b 相除 將結果 c 放回
///////////////////////////////////////////////////////////////////////////
// end-code 之後 10 3 / . 會 印出 3.3333333333333335
///////////////////////////////////////////////////////////////////////////
  var n=dStk.pop(); dStk[dStk.length-1]/=n
} end-code
10 3 / .
code % function(){ // [0,10] % ( a b -- c ) 對 a 取 b 的餘數 結果 為 c
///////////////////////////////////////////////////////////////////////////
// end-code 之後 10 3 / . 會 印出 30
///////////////////////////////////////////////////////////////////////////
  var n=dStk.pop(); dStk[dStk.length-1]%=n
} end-code
13 3 % .
code hex function(){ // [0,11] hex ( -- ) 用 十六進制 解讀/列印 整數
///////////////////////////////////////////////////////////////////////////
// end-code 之後 128 hex . 會將 十進制 的 128 用 十六進制 列印為 80
///////////////////////////////////////////////////////////////////////////
  base=16
} end-code
128 hex .
code decimal function(){ // [0,12] decimal ( -- ) 用 10 進制 解讀/列印 整數
///////////////////////////////////////////////////////////////////////////
// end-code 之後 100 decimal . 會將 十六進制 的 100 用 十進制 列印為 256
///////////////////////////////////////////////////////////////////////////
  base=10
} end-code
100 decimal .