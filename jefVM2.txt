code . function(){ print(" "+dataStack.pop()) }end-code
word defined at 0,4 ok
code + function(){ var x=dataStack.pop(); dataStack[dataStack.length-1]+=x }end-code
word defined at 0,5 ok
2 3 4 + + . 9 ok
code . function(){ // [0,4] . ( n -- ) 從堆疊 印出 n
///////////////////////////////////////////////////////////////////////////
// 注意 系統啟動時 只認得指令 code, 這 code 可定義隨後 任意字串 為新指令
// 隨後直到 end-code 前的字串 為 這新指令 所要執行的 匿名 js function 
// 雙斜線後 直到列尾的文字 是 js function 的 內部註解語法, 不能在外部使用
// 首列 [0,4] 表示 所定義的 指令位址 為 vocs[0].wrds[4] 可簡寫為 0,4
// 首列 圓括號內 雙減號 前後 表示 執行 這指令 前後的 堆疊狀況
// 這裡 從堆疊取的 n 可為 字串、浮點數、整數, 而 整數 還可用 不同進制 印出
// end-code 之後 1 2 3 . . . 表示 依序 輸入 3 個整數 後 連續執行 3 次 印出
// 注意 先印出的 應該是 3, 然後 印出 2, 最後印出的 是 1	
///////////////////////////////////////////////////////////////////////////
  var n=dStk.pop(); print(' '+(n%1===0 && base!==10 ? n.toString(base) :n))
  /////////////////////////////////////////////////////////////////////////
  // dStk 為 資料堆疊, n%1===0 檢視 n 是否整數, base 為 整數 解讀/列印 基數
  // print(' '+n) 印出
  /////////////////////////////////////////////////////////////////////////
} end-code
words defined at 0,6 0,4 ok
 ok
1 2 3 . . .
Abort at word ".", because dStk is not defined
1 2 3 . . .
Abort at word ".", because dStk is not defined
code immediate function () {	 // 定義 指令 immediate
  lstWrd.immediate=1		 // 使 最後定義的指令 在高階編譯狀態 也能執行
} end-code
word defined at 0,7 ok
 ok
code // function () { var n,t	 // 定義 指令 // (雙斜線) 忽略 源碼字串 到列尾
  iTib += (n= (t=tib.substr(iTib)).indexOf('\n') )>=0 ? n : t.length
} end-code immediate		 // 使 雙斜線 指令 在高階編譯狀態 也能執行
word defined at 0,8
Abort at word "immediate", because lstWrd is not defined
code function xxx(msg) {
  print(msg)
} end-code
javascript function xxx(msg) defined ok
 ok
code xxx function() {
  xxx('hello')
} end-code
word defined at 0,9 ok
 ok
xxx
Abort at word "xxx", because xxx is not defined
code immediate function () {	// 定義 指令 immediate
  lastWord.immediate=1		// 使 最後定義的指令 在高階編譯狀態 能執行
} end-code
words defined at 0,10 0,7 ok
 ok
code // function () { var n,t	// 定義 指令 // (雙斜線) 忽略源碼字串到 列尾
  iTib += at(tib.substr(iTib),'\n')
} end-code immediate		// 使 雙斜線 指令 在高階編譯狀態 能執行
words defined at 0,11 0,8 ok
// /////////// words preload ( include previous 2 words /////////////// // ok
code debug function() {	// 定義 指令 debug ( <指令名稱> -- )
  var tkn=nextToken()	// 從 隨後源碼 取 tkn (以空格區隔的下一個字串)
  var z=findWord(tkn)	// 取 所對應 指令位址 [vid,wid]
  if (z) {
    if (0>debugged.indexOf(z=z.join())) // 如果 不在 待追蹤指令陣列
      debugged.push(z)			// 將 指令位址 加入 待追蹤指令陣列
    else
      print(z+' already in debugged')	// 已在 待追蹤指令陣列
  } else
      abort('debug '+tkn+' undefined')// 沒有 所對應 符式指令 資訊
} end-code
word defined at 0,12 ok
 ok
code ' function () { // 定義 指令 ' ( <指令名稱> -- 指令位址 )
  var z, t
  var z=findWord(t=nextToken())	// 取 隨後源碼 指令名稱 的 指令位址 z
  if (z) dataStack.push(z)		// 若找到 z 就放上堆疊
  else abort(t+' not found')	// 否則 就 abort
} end-code
word defined at 0,13 ok
 ok
code alias function () { // 定義 指令 alias ( 指令位址 <指令別名> -- )
  var w=zWord(dataStack.pop())	// 取 已定義指令 w
  newWord(nextToken(),w.xt)	// 定義 隨後源碼 指令別名
  if (w.src)         lastWord.src	 	=w.src		// 高階源碼
  if (w.compileOnly) lastWord.compileOnly	=w.compileOnly	// 在高階編譯狀態 才執行
  if (w.immediate)   lastWord.immediate	=w.immediate	// 在高階編譯狀態 能執行
  if (w.words)       lastWord.words	=w.words	// 詞彙指令陣列
  if (w.index)  lastWord.index	=w.index	// 詞彙指令索引
} end-code
word defined at 0,14 ok
 ok
' // alias \
word defined at 0,15 ok
 ok
code words function(){ // 定義 指令 words ( -- ) 列印 當前詞彙 所有 指令名稱
  var v=vocs[context[0]]
  print('\nin '+v.name+' have words:\n '+v.words.map(	// 列印 每個指令
    function(w){return w?w.name:''}			// 其 名稱
  ).join(' '))						// 以 空格 區隔
} end-code
word defined at 0,16 ok
 ok
code : function () { // 定義 指令 : ( <指令名稱> -- ) 開始 高階指令的定義
  src		= ''			// 高階指令 源碼
  hSrc		= iTib-2		// 高階指令 源碼字串起點
  hName		= nextToken()		// 高階指令 名稱
  hXt		= compiledCode.length 	// 高階指令 編碼起點
  compiling	= 1			// 高階指令 編譯狀態 進入
} end-code
word defined at 0,17 ok
 ok
code compileOnly function () { // 定義 指令 compileOnly ( -- )
  lastWord.compileOnly=1		// 使 最後定義指令 高階編譯狀態 才編碼
} end-code
word defined at 0,18 ok
 ok
code ret function () { // 定義 指令 ret ( -- ) 結束被呼叫的 高階指令
  ip=returnStack.pop()		// 從 return stack 取出 ip
} end-code compileOnly	// 使 ret 在高階編譯狀態 才編碼
word defined at 0,19 ok
code doLit function () { // 定義 指令 doLit ( -- n ) 將 隨後編碼 n 放上堆疊
  var n=compiledCode[ip++]	// 取 ip 所指 編碼 n
  dataStack.push(n)			// 將 n 放上堆疊
} end-code compileOnly		// 使 doLit 在高階編譯狀態 才編碼
word defined at 0,20 ok
code ; function () { // 定義 指令 ; ( -- ) 結束 高階指令的定義
  compileCode("ret")			// 編譯 ret 為 高階指令 內碼
  compiling=0				// 高階指令 編譯狀態 結束
  var src=tib.substring(hSrc,iTib)	// 源碼字串
  newWord(hName,hXt,src)		// 以 名稱 內碼起點 原碼字串 定義 高階指令
} end-code compileOnly immediate	// 使 ; 在高階編譯狀態 才編碼 能執行
word defined at 0,21 ok
// //////////////////////// vocabulary test ////////////////////////// // ok
code function order(msg) {
  msg=msg||''
  print(msg)
  showWarning('\ncurrent:'+current+'/'+vocs[current].name+
    '  context:'+context+'/'+context.map(function(iv){
    return vocs[iv].name
  }))
} end-code
javascript function order(msg) defined ok
 ok
code vocabulary function(){ var v, i, vid, w
  v=vocs[current], i=v.words.length, vid=vocs.length
  // add new word
  newWord(nextToken(),eval('(function(){context[0]='+vid+',VM.order()})'))
  w=v.words[i], w.vid=vid, w.words=[0], w.index={}
  vocs.push(w) // add new vocabulary
} end-code immediate
word defined at 0,22 ok
 ok
code definitions function(){
  current=context[0],VM.order()
} end-code
word defined at 0,23 ok
 ok
code also function () {
  context.unshift(context[0]),VM.order()
} end-code
word defined at 0,24 ok
 ok
code previous function () {
  context.shift(),VM.order()
} end-code
word defined at 0,25 ok
 ok
vocabulary voc1 // 定義 詞彙 voc1
word defined at 0,26 ok
vocabulary voc2 // 定義 詞彙 voc2
word defined at 0,27 ok
vocabulary voc3 // 定義 詞彙 voc3
word defined at 0,28 ok
voc1 definitions
current:0/root  context:1,0/voc1,root
current:1/voc1  context:1,0/voc1,root ok
 ok
code a1 function () {
  VM.order(' a1 in voc1')
} end-code
word defined at 1,1 ok
 ok
code b1 function () {
  VM.order(' b1 in voc1')
} end-code
word defined at 1,2 ok
 ok
code c1 function () {
  VM.order(' c1 in voc1')
} end-code
word defined at 1,3 ok
 ok
voc2 definitions
current:1/voc1  context:2,0/voc2,root
current:2/voc2  context:2,0/voc2,root ok
 ok
code a22 function () {
  VM.order(' a22 in voc2')
} end-code
word defined at 2,1 ok
 ok
code b22 function () {
  VM.order(' b22 in voc2')
} end-code
word defined at 2,2 ok
 ok
code c22 function () {
  VM.order(' c22 in voc2')
} end-code
word defined at 2,3 ok
 ok
voc3 definitions
current:2/voc2  context:3,0/voc3,root
current:3/voc3  context:3,0/voc3,root ok
 ok
code a333 function () {
  VM.order(' a333 in voc3')
} end-code
word defined at 3,1 ok
 ok
code b333 function () {
  VM.order(' b333 in voc3')
} end-code
word defined at 3,2 ok
 ok
code c333 function () {
  VM.order(' c333 in voc3')
} end-code
word defined at 3,3 ok
 ok
voc1 words
current:3/voc3  context:1,0/voc1,root
in voc1 have words:
  a1 b1 c1 ok
 ok
voc2 words
current:3/voc3  context:2,0/voc2,root
in voc2 have words:
  a22 b22 c22 ok
 ok
voc3 words
current:3/voc3  context:3,0/voc3,root
in voc3 have words:
  a333 b333 c333 ok
 ok
voc2 definitions
current:3/voc3  context:2,0/voc2,root
current:2/voc2  context:2,0/voc2,root ok
 ok
code a1 function () {
  VM.order(' a1 in voc2')
} end-code
word defined at 2,4 ok
 ok
voc1 a1 also
current:2/voc2  context:1,0/voc1,root a1 in voc1
current:2/voc2  context:1,0/voc1,root
current:2/voc2  context:1,1,0/voc1,voc1,root ok
 ok
voc2 b22 a1
current:2/voc2  context:2,1,0/voc2,voc1,root b22 in voc2
current:2/voc2  context:2,1,0/voc2,voc1,root a1 in voc2
current:2/voc2  context:2,1,0/voc2,voc1,root ok
 ok
voc3 dbg c333 a1
current:2/voc2  context:3,1,0/voc3,voc1,root
000007 tracing 3,3 c333  dataStack: empty  returnStack: empty c333 in voc3
current:2/voc2  context:3,1,0/voc3,voc1,root a1 in voc1
current:2/voc2  context:3,1,0/voc3,voc1,root ok
 ok
previous voc3 a1 // a1 could no longer be found
current:2/voc2  context:1,0/voc1,root
current:2/voc2  context:3,0/voc3,root
"a1" undefined
code immediate function(){// 定義 指令 immediate		( -- )
  lastWord.immediate=1			// 使 最後定義的指令 在高階編譯狀態 能執行
} end-code
words defined at 0,29 0,10 0,7 ok
 ok
code compileOnly function(){// 定義 指令 compileOnly	( -- )
  lastWord.compileOnly=1			// 使 最後定義的指令 在高階編譯狀態 才執行
} end-code
words defined at 0,30 0,18 ok
 ok
code // function(){ var n,t// 定義 指令 // (雙斜線) 忽略源碼字串到 列尾
  iTib += (n= (t=tib.substr(iTib)).indexOf('\n') )>=0 ? n : t.length
} end-code immediate			// 使 雙斜線 指令 在高階編譯狀態 能執行
words defined at 0,31 0,11 0,8 ok
// //////////////////////////////////////////////////////////////////////// ok
code : function(){// 定義 指令 : ( <指令名稱> -- ) 開始 高階指令的定義
  src		= ''			// 高階指令 源碼
  hSrc		= iTib-2		// 高階指令 源碼字串起點
  hName		= nextToken()		// 高階指令 名稱
  hXt		= compiledCode.length 	// 高階指令 編碼起點
  compiling	= 1			// 高階指令 編譯狀態 進入
} end-code
words defined at 0,32 0,17 ok
 ok
code ret function(){// 定義 指令 ret ( -- ) 結束被呼叫的 高階指令
  ip=returnStack.pop()				// 從 return stack 取出 ip
} end-code compileOnly			// 使 ret 在高階編譯狀態 才編碼
words defined at 0,33 0,19 ok
code ; function () {			// 定義 指令 ; ( -- ) 結束 高階指令的定義
  compileCode("ret")			// 編譯 ret 為 高階指令 內碼
  compiling=0				// 高階指令 編譯狀態 結束
  var src=tib.substring(hSrc,iTib)	// 源碼字串
  newWord(hName,hXt,src)			// 以 名稱 內碼起點 原碼字串 定義 高階指令
} end-code compileOnly immediate	// 使 ; 在高階編譯狀態 才編碼 能執行
words defined at 0,34 0,21 ok
// //////////////////////////////////////////////////////////////////////// ok
code directOut function(){
  VM.directOut.checked=true
} end-code
word defined at 0,35 ok
 ok
code bufferOut function(){
  VM.directOut.checked=false
} end-code
word defined at 0,36 ok
 ok
code start function(){//( <指令> -- )// 隨後 高階指令 設為要起動的 工作
  time0=new Date()
  VM.directOut.checked=true
  while(z=findWord( nextToken() )) { 	// 搜尋指令位址 z
    tasks.push(z)
    var w=zWord(z) 			// 取得指令資訊 w
    if (w.src) { 			// 若是 高階指令
       setTimeout(eval(
	  '(function(){resumeTask('+	// 以 resumeTask 為 起動涵式
	  JSON.stringify({
	     returnStack:[ip],dataStack:[],z:z,ip:w.xt// 設定 起動工作 所需資訊
	  })+')})'
       ),10), waiting=1			// 10 毫秒後起動
       if (tracing)			// 若要顯示 追蹤檢視資訊
          print('\n'+digits(new Date()-time0,6)+' set to resumeTask '
             +z+' '+w.name+' '+w.xt+' after 10 ms')
    } else
       abort(z+' '+w.name+' not high level to start')
  }
} end-code
word defined at 0,37 ok
 ok
code function ms(n){
  var z=compiledCode[ip++]		// 從 隨後內碼 取 指定位址
  setTimeout(eval(
     '(function(){resumeTask('+		// 以 resumeTask 為 起動涵式
     JSON.stringify({
        returnStack:returnStack,dataStack:dataStack,z:z,ip:ip	// 設定 接續工作 所需資訊
     })+')})'
  ),n), waiting=1			// n 毫秒後起動
  if (tracing)				// 若要顯示 追蹤檢視資訊
     print('\n'+digits(new Date()-time0,6)+' set to resumeTask '
          +z+' '+zWord(z).name+' '+ip+' after '+n+' ms')
} end-code
javascript function ms(n) defined ok
 ok
code function resumeAt(t){
  n = t-(new Date()-time0)
  var z=compiledCode[ip++]		// 從 隨後內碼 取 指定位址
  setTimeout(eval(
     '(function(){resumeTask('+		// 以 resumeTask 為 起動涵式
     JSON.stringify({
        returnStack:returnStack,dataStack:dataStack,z:z,ip:ip	// 設定 接續工作 所需資訊
     })+')})'
  ),n), waiting=1			// n 毫秒後起動
  if (tracing)				// 若要顯示 追蹤檢視資訊
     print('\n'+digits(new Date()-time0,6)+' set to resumeTask '
          +z+' '+zWord(z).name+' '+ip+' at '+t+' ms')
} end-code
javascript function resumeAt(t) defined ok
 ok
code (resumeAt) function(){ //( t -- )
  VM.resumeAt( dataStack.pop() )
} end-code compileOnly
word defined at 0,38 ok
 ok
code resumeAt function(){ //( t -- )// 暫停工作 (n 毫秒後接續執行 iTib 所指 隨後源碼)
  if (compiling) {			// 若是 編議狀態
     compileCode('(resumeAt)',		// 將 (ms) 編為內碼
        current+','+
        vocs[current].words.length	// 當前正定義的指令 隨後 也編為內碼
     ); return
  }
  var n=dataStack.pop()-( new Date()-time0 )	// 從 堆頂 取出 t 計算 n
  setTimeout(eval(
     '(function(){resumeExec('+		// 以 resumeExec 為 起動涵式
     iTib+')})'				// 設定 接續工作 源碼位址
  ),n), waiting=1			// n 毫秒後 接續
  if (tracing)				// 若要顯示 追蹤檢視資訊
     print('\n'+digits(new Date()-time0,6)+' set to resumeExec '
          +iTib+' after '+n+' ms')
} end-code immediate
word defined at 0,39 ok
 ok
code (ms) function(){ //( n -- )// 暫停工作 (n 毫秒後 接續執行 ip 所指 隨後內碼)
  VM.ms( dataStack.pop() )
} end-code compileOnly
word defined at 0,40 ok
 ok
code ms function(){ //( n -- )// 暫停工作 (n 毫秒後接續執行 iTib 所指 隨後源碼)
  if (compiling) {			// 若是 編議狀態
     compileCode('(ms)',		// 將 (ms) 編為內碼
        current+','+
        vocs[current].words.length	// 當前正定義的指令 隨後 也編為內碼
     ); return
  }
  var n=dataStack.pop()			// 從 堆頂 取出 n
  setTimeout(eval(
     '(function(){resumeExec('+		// 以 resumeExec 為 起動涵式
     iTib+')})'				// 設定 接續工作 源碼位址
  ),n), waiting=1			// n 毫秒後 接續
  if (tracing)				// 若要顯示 追蹤檢視資訊
     print('\n'+digits(new Date()-time0,6)+' set to resumeExec '
          +iTib+' after '+n+' ms')
} end-code immediate
word defined at 0,41 ok
 ok
// //////////////////////////////////////////////////////////////////////// ok
code (for) function(){
  returnStack.push(dataStack.pop())
} end-code
word defined at 0,42 ok
 ok
code for function(){
  compileCode('(for)'), dataStack.push(compiledCode.length)
} end-code compileOnly immediate
word defined at 0,43 ok
 ok
code (next) function () {
  if ( 0 > (--returnStack[returnStack.length-1]) )
     ip++, returnStack.length--
  else
     ip=compiledCode[ip]
} end-code compileOnly
word defined at 0,44 ok
 ok
code next function () {
  compileCode('(next)',dataStack.pop())
} end-code compileOnly immediate
word defined at 0,45 ok
 ok
code r@ function () {
  dataStack.push(returnStack[returnStack.length-1])
} end-code
word defined at 0,46 ok
 ok
code doLit function(){// 定義 指令 doLit ( -- n ) 將 隨後內碼 n 放上堆疊
  var n=compiledCode[ip++]	// 取 ip 所指 內碼 n
  dataStack.push(n)			// 將 n 放上堆疊
} end-code compileOnly		// 使 doLit 在高階編譯狀態 才編碼
words defined at 0,47 0,20 ok
code + function(){
  var x=dataStack.pop(); dataStack[dataStack.length-1]+=x
} end-code
words defined at 0,48 0,5 ok
 ok
code - function(){
  var x=dataStack.pop(); dataStack[dataStack.length-1]-=x
} end-code
word defined at 0,49 ok
 ok
code * function(){
  var x=dataStack.pop(); dataStack[dataStack.length-1]*=x
} end-code
word defined at 0,50 ok
 ok
code $" function(){// 定義 $"  取源碼字串直到 " (雙引號)
  var s=nextToken('"')
  if (compiling) compileCode('doLit',s)
  else dataStack.push(s)
} end-code immediate
word defined at 0,51 ok
 ok
code . function(){// 定義 . ( n -- ) 印出 堆頂 數字 或 字串
  print(' '+dataStack.pop())
} end-code
words defined at 0,52 0,6 0,4 ok
 ok
code (.) function(){// 定義 (.) 列印 隨後內碼
  print(compiledCode[ip++])
} end-code compileOnly
word defined at 0,53 ok
 ok
code ." function(){// 定義 ." 列印源碼字串直到 " (雙引號)
  var s=nextToken('"')
  if (compiling)
     compileCode('(.)',s)
  else print(s)
} end-code immediate
word defined at 0,54 ok
 ok
code cr function(){// 定義 cr 印出 列尾
  print('\n')
} end-code
word defined at 0,55 ok
 ok
// //////////////////////////////////////////////////////////////////////// ok
code debug function(){ //( <指令名稱> -- )// 追加 隨後指令名稱 到 待追蹤陣列
  while(token=nextToken()){
    if (z=findWord(token)){
       debugged.push(z)
       print('\nadd '+token+' to debugged')
    } else
       showErr('\n'+token+' undefined to debug')
  }
} end-code
words defined at 0,56 0,12 ok
 ok
code unbug function(){//( <指令名稱> -- )	// 從 待追蹤陣列 刪除 隨後指令名稱
  while(token=nextToken()){ var i
    if (i=debugged.indexOf(token)) {
       debugged=debugged.slice(0,i).concat(debugged.slice(i+1))
       print('\nremove '+token+' from debugged')
    } else
       showErr('\n'+token+' not in debbuged')
  }
} end-code
word defined at 0,57 ok
